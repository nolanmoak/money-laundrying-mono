// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Db;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("backend.Db.PeakDataLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("City")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeason", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId", "Season")
                        .IsUnique();

                    b.ToTable("LocationSeasons");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDay", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId", "Day")
                        .IsUnique();

                    b.ToTable("LocationSeasonDays");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDayEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DayId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DayId", "Type")
                        .IsUnique();

                    b.ToTable("LocationSeasonDayEntries");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDayEntryRange", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("EndHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StartHour")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("LocationSeasonDayEntryRanges");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeason", b =>
                {
                    b.HasOne("backend.Db.PeakDataLocation", "Location")
                        .WithMany("Seasons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDay", b =>
                {
                    b.HasOne("backend.Db.PeakDataLocationSeason", "Season")
                        .WithMany("Days")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDayEntry", b =>
                {
                    b.HasOne("backend.Db.PeakDataLocationSeasonDay", "Day")
                        .WithMany("Entries")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDayEntryRange", b =>
                {
                    b.HasOne("backend.Db.PeakDataLocationSeasonDayEntry", "Entry")
                        .WithMany("Ranges")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocation", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeason", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDay", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("backend.Db.PeakDataLocationSeasonDayEntry", b =>
                {
                    b.Navigation("Ranges");
                });
#pragma warning restore 612, 618
        }
    }
}
